<?php


namespace app\mip\controller;


use app\model\Author;
use app\model\Banner;
use app\model\Chapter;
use app\model\Tags;
use app\service\BookService;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\facade\Db;
use think\facade\View;
use app\common\RedisHelper;

class index extends Base
{
    protected $bookService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->bookService = app('bookService');
    }

    public function index()
    {
        $hot_books = cache('hotBooks');
        if (!$hot_books) {
            $hot_books = $this->bookService->getHotBooks($this->prefix, $this->end_point, '1900-01-01', 6);
            cache('hotBooks', $hot_books, null, 'redis');
        }

        $newest = cache('newestHomepage');
        if (!$newest) {
            $newest = $this->bookService->getBooks($this->end_point, 'last_time', '1=1', 6);
            cache('newestHomepage', $newest, null, 'redis');
        }

        $ends = cache('endsHomepage');
        if (!$ends) {
            $ends = $this->bookService->getBooks($this->end_point, 'last_time', [['end', '=', '1']], 6);
            cache('endsHomepage', $ends, null, 'redis');
        }

        $tags = cache('tags');
        if (!$tags) {
            $tags = Tags::select();
            cache('tags', $tags, null, 'redis');
        }

        $catelist = array(); //分类漫画数组
        $cateItem = array();
        foreach ($tags as $tag) {
            $books = cache('booksFilterByTag:' . $tag);
            if (!$books) {
                $books = $this->bookService->getByTag($tag->tag_name, $this->end_point, 15);
                cache('booksFilterByTag:' . $tag, $books, null, 'redis');
            }
            $cateItem['books'] = $books->toArray();
            $cateItem['tag'] = ['id' => $tag->id, 'tag_name' => $tag->tag_name];
            $catelist[] = $cateItem;
        }

        View::assign([
            'newest' => $newest,
            'hot' => $hot_books,
            'ends' => $ends,
            'tags' => $tags,
            'catelist' => $catelist,
            'c_url' => config('site.mobile_domain')
        ]);
        return view($this->tpl);
    }

    public function search()
    {
        $keyword = input('keyword');
        $books = cache('searchresult:' . $keyword);
        if (!$books) {
            $books = $this->bookService->search($keyword, 30);
            cache('searchresult:' . $keyword, $books, null, 'redis');
        }
        foreach ($books as &$book) {
            $author = Author::find($book['author_id']);
            if (is_null($author)) {
                $author = new Author();
                $author->author_name = '佚名';
            }
            $book['author'] = $author;
            if ($this->end_point == 'id') {
                $book['param'] = $book['id'];
            } else {
                $book['param'] = $book['unique_id'];
            }
        }
        $tags = cache('tags');
        if (!$tags) {
            $tags = Tags::select();
            cache('tags', $tags, null, 'redis');
        }
        View::assign([
            'books' => $books,
            'count' => count($books),
            'keyword' => $keyword,
            'tags' => $tags,
            'c_url' => $this->c_url
        ]);
        return view($this->tpl);
    }
}