<?php

namespace app\admin\controller;

use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\facade\View;
use app\model\Author;

class Authors extends BaseAdmin
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        return \view();
    }

    public function list()
    {
        $page = intval(input('page'));
        $limit = intval(input('limit'));
        $data = Author::order('id', 'desc');
        $count = $data->count();
        $authors = $data->order('id', 'desc')
            ->limit(($page - 1) * $limit, $limit)->select();
        return json([
            'code' => 0,
            'msg' => '',
            'count' => $count,
            'data' => $authors
        ]);
    }

    public function edit()
    {
        $id = input('id');
        try {
            $author = Author::findOrFail($id);
            if (request()->isPost()) {
                $author->status = input('status');
                $pass = input('password');
                if (empty($pass) || is_null($pass))
                {

                } else {
                    $author->password = $pass;
                }
                $result = $author->save();
                if ($result) {
                    return json(['err' => '0', 'msg' => '修改状态成功']);
                } else {
                    return json(['err' => '1', 'msg' => '修改状态失败']);
                }
            }
            View::assign('author', $author);
            return \view();
        } catch (ModelNotFoundException $e) {
            return json(['err' => '1', 'msg' => $e->getMessage()]);
        }
    }

    public function delete()
    {
        $id = input('id');
        try {
            $author = Author::findOrFail($id);
            $books = $author->books;
            if (count($books) > 0) {
                return json(['err' => '1', 'msg' => '该作者名下还有作品，请先删除所有作品']);
            }
            $result = $author->delete();
            if ($result) {
                return json(['err' => '0', 'msg' => '删除成功']);
            } else {
                return json(['err' => '1', 'msg' => '删除失败']);
            }
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function deleteAll($ids)
    {
        $ids = input('ids');
        Author::destroy($ids);
    }

    public function search()
    {
        $title = input('author_name');
        $where = [
            ['author_name', 'like', '%' . $title . '%']
        ];
        $page = intval(input('page'));
        $limit = intval(input('limit'));
        $data = Author::where($where);
        $count = $data->count();
        $authors = $data->limit(($page - 1) * $limit, $limit)->order('id', 'desc')->select();

        return json([
            'code' => 0,
            'msg' => '',
            'count' => $count,
            'data' => $authors
        ]);
    }
}